1: burn the linux console image to a class 4+ sd card
2: login (root)
3: expand your partition on boot by using ./resize2fs_once.sh
4: reboot
5: call ./expand_rootfs.sh
6: reboot
	*Now you can use the whole sd memory space
7: you can check what system calsses you have access by going to the /sys/class/ directory
8: cd /sys/class/leds
9: you will find that we only have the hps_led configured by default
10: to change that, we need to configure the fpga with the teraisic file fpga_config.dtbo
11: in order to program the FPGA from the linux terminal you need to follow the following steps
	* go to root@socfpga:~# using cd 
	* make a config file system directory: mount -t configfs configfs /config
	* go to config using: cd /config/
	* go to the overlays folder created in the config directory (automatically) using :cd /device-tree/overlays
	* make an FPGA configuration directory (name doesn't matter as long as you can reach it): mkdir fpga_reconfiguration
	* you can find the device tree overlay file and reconfiguration bitstream file of the FPGA generated by quartus by using: ls /lib/firmware
	* it is called "fpga.dtbo" and "fpga.rbf"
	* note: up until this point your FPGA should not have any peripheral running, which is fine.
	* load the fpga.dtbo to the path folder created in our FPGA configuration directory "fpga_reconfiguration" using echo fpga.dtbo > fpga_reconfiguration/path
	* As soon as it is loaded you should notice the seven segment lighting up and the heart beat led working.
	* Additionally, if you go back to check the /sys/class/leds or any other class you should notice that your other peripherals are now defined.
	* You can test that out by going to the leds class directory : cd /sys/class/leds
	* Toggeling fpga_led0 brightness to 1 using echo 1 > fpga_led0/brightness
	* Toggeling fpga_led0 brightness to 0 using echo 0 > fpga_led0/brightness
12: for HPS programs you can write the programs directly on the board and compile them using VIM and gcc compiler.
	*: vim hello.c
	*: go to input mode using "i"
	*: c code for hello world:
			#include <stdio.h>
		int main(){

			printf("hello world DE-10");
			return 0;
		}
	*: go to command mode using "esc"
	*: write down :wq! to exit
	*: compile the program using: gcc hello.c -Dsoc_cv_av -Wall -o hello
	*: ./hello
13: You can compile your c files using the EDS command shell by downloading the "ARM DS-5" tool chain (it uses cygwin to emulate linux in windows)
	* make a folder for your .c project: mkdir "project name"
	* cd into it cd /"project name/"
	* make a makefile and execute it or compile using gcc: arm-linux-gnueabihf-gcc -Dsoc_cv_av hello.c -o hello
	* Now we need to send the file over to the DE-10
14: connect an ethernet cable to your DE-10 from your router and then go to the absolute root directory using: cd
15: type "udhcpc" on the kernel and it should run a mini dhcp program built in the DE-10 and it should get you an ip address from your router using DHCP
16: on your EDS command shell use shh root@ip
17: yes 
18: passwd
19: scp root@ip:~/hello .